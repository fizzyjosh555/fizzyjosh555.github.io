{"ast":null,"code":"/**\n * @licence MIT\n * @author Sergey Melyukov\n */\nvar allSettled = require('promise-ext-settled');\n/**\n * Image preloader\n *\n * @class ImagePreloader\n * @constructor\n *\n * @param {(String|HTMLImageElement)=} fallbackImage\n * @param {function({status:boolean, value:HTMLImageElement})=} onProgress\n */\n\n\nvar ImagePreloader = function (fallbackImage, onProgress) {\n  /**\n   * @type {?function({status: boolean, value: HTMLImageElement})}\n   */\n  this.onProgress = typeof onProgress === 'function' ? onProgress : null;\n  /**\n   * @type {?String|HTMLImageElement}\n   */\n\n  this.fallbackImage = typeof fallbackImage === 'string' || fallbackImage instanceof HTMLImageElement ? fallbackImage : null;\n};\n/**\n * Do simple image preloading.\n *\n * @param {!(String|HTMLImageElement)} imageSource\n *\n * @return {Promise} will be resolved/rejected with HTMLImageElement\n */\n\n\nImagePreloader.simplePreload = function (imageSource) {\n  return new Promise(function (resolve, reject) {\n    var img;\n\n    if (imageSource instanceof HTMLImageElement) {\n      img = imageSource;\n\n      if (!img.complete) {\n        img.onload = resolve.bind(null, img);\n        img.onerror = img.onabort = reject.bind(null, img);\n      } else if (img.naturalHeight) {\n        resolve(img);\n      } else {\n        reject(img);\n      }\n    } else if (typeof imageSource === 'string') {\n      img = new Image();\n      img.onload = resolve.bind(null, img);\n      img.onerror = img.onabort = reject.bind(null, img);\n      img.src = imageSource;\n    }\n  });\n};\n/**\n * Preload image.\n *\n * If fallbackImage-property is defined and correct, then src-attribute for the broken images will replaced by fallbackImage\n * As well, origin image url will be placed to 'data-fail-src' attribute.\n *\n * If onProgress-method is defined, then this method will be calling for every image loading (fulfilled of rejected).\n *\n * @param {...(String|HTMLImageElement|Array<String|HTMLImageElement>)} args\n *\n * @return {Promise} will be resolved with Array<{status:boolean, value:HTMLImageElement}>\n *\n *     status-property - is the status of image loading\n *     status-property will be true if:\n *      - original image loading is ok\n *      - or original image loading is fail but fallback-image loading is ok\n *     status-property will be false if:\n *      - original image loading is fail\n *      - or original image loading is fail and fallback-image loading is fail\n *\n *     value-property - is the image that was loaded\n */\n\n\nImagePreloader.prototype.preload = function (args) {\n  var that = this,\n      imagesToLoad = Array.prototype.concat.apply([], Array.prototype.slice.call(arguments));\n  imagesToLoad = imagesToLoad.map(function (imageSource) {\n    return ImagePreloader.simplePreload(imageSource).catch(function (brokenImage) {\n      if (that.fallbackImage) {\n        return ImagePreloader.simplePreload(that.fallbackImage).then(function (fallbackImage) {\n          brokenImage.setAttribute('data-fail-src', brokenImage.src);\n          brokenImage.src = fallbackImage.src;\n          return brokenImage;\n        }, function () {\n          return Promise.reject(brokenImage);\n        });\n      }\n\n      return Promise.reject(brokenImage);\n    });\n  });\n  return allSettled(imagesToLoad, that.onProgress);\n};\n\nmodule.exports = ImagePreloader;","map":{"version":3,"sources":["C:/Users/kwbin/Documents/GitHub/portweb/node_modules/image-preloader/src/main.js"],"names":["allSettled","require","ImagePreloader","fallbackImage","onProgress","HTMLImageElement","simplePreload","imageSource","Promise","resolve","reject","img","complete","onload","bind","onerror","onabort","naturalHeight","Image","src","prototype","preload","args","that","imagesToLoad","Array","concat","apply","slice","call","arguments","map","catch","brokenImage","then","setAttribute","module","exports"],"mappings":"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","sourcesContent":["/**\n * @licence MIT\n * @author Sergey Melyukov\n */\n\nvar allSettled = require('promise-ext-settled');\n\n/**\n * Image preloader\n *\n * @class ImagePreloader\n * @constructor\n *\n * @param {(String|HTMLImageElement)=} fallbackImage\n * @param {function({status:boolean, value:HTMLImageElement})=} onProgress\n */\nvar ImagePreloader = function(fallbackImage, onProgress) {\n    /**\n     * @type {?function({status: boolean, value: HTMLImageElement})}\n     */\n    this.onProgress = typeof onProgress === 'function' ? onProgress : null;\n    /**\n     * @type {?String|HTMLImageElement}\n     */\n    this.fallbackImage = typeof fallbackImage === 'string' || fallbackImage instanceof HTMLImageElement ? fallbackImage : null;\n};\n\n/**\n * Do simple image preloading.\n *\n * @param {!(String|HTMLImageElement)} imageSource\n *\n * @return {Promise} will be resolved/rejected with HTMLImageElement\n */\nImagePreloader.simplePreload = function(imageSource) {\n    return new Promise(function(resolve, reject) {\n        var img;\n\n        if (imageSource instanceof HTMLImageElement) {\n            img = imageSource;\n\n            if (!img.complete) {\n                img.onload = resolve.bind(null, img);\n                img.onerror = img.onabort = reject.bind(null, img);\n            } else if (img.naturalHeight) {\n                resolve(img);\n            } else {\n                reject(img);\n            }\n        } else if (typeof imageSource === 'string') {\n            img = new Image();\n            img.onload = resolve.bind(null, img);\n            img.onerror = img.onabort = reject.bind(null, img);\n            img.src = imageSource;\n        }\n    });\n};\n\n/**\n * Preload image.\n *\n * If fallbackImage-property is defined and correct, then src-attribute for the broken images will replaced by fallbackImage\n * As well, origin image url will be placed to 'data-fail-src' attribute.\n *\n * If onProgress-method is defined, then this method will be calling for every image loading (fulfilled of rejected).\n *\n * @param {...(String|HTMLImageElement|Array<String|HTMLImageElement>)} args\n *\n * @return {Promise} will be resolved with Array<{status:boolean, value:HTMLImageElement}>\n *\n *     status-property - is the status of image loading\n *     status-property will be true if:\n *      - original image loading is ok\n *      - or original image loading is fail but fallback-image loading is ok\n *     status-property will be false if:\n *      - original image loading is fail\n *      - or original image loading is fail and fallback-image loading is fail\n *\n *     value-property - is the image that was loaded\n */\nImagePreloader.prototype.preload = function(args) {\n    var that = this,\n        imagesToLoad = Array.prototype.concat.apply([], Array.prototype.slice.call(arguments));\n\n    imagesToLoad = imagesToLoad.map(function(imageSource) {\n        return ImagePreloader.simplePreload(imageSource).catch(function(brokenImage) {\n            if (that.fallbackImage) {\n                return ImagePreloader.simplePreload(that.fallbackImage)\n                    .then(function(fallbackImage) {\n                        brokenImage.setAttribute('data-fail-src', brokenImage.src);\n                        brokenImage.src = fallbackImage.src;\n\n                        return brokenImage;\n                    }, function() {\n                        return Promise.reject(brokenImage);\n                    });\n            }\n\n            return Promise.reject(brokenImage);\n        });\n    });\n\n    return allSettled(imagesToLoad, that.onProgress);\n};\n\nmodule.exports = ImagePreloader;\n"]},"metadata":{},"sourceType":"script"}