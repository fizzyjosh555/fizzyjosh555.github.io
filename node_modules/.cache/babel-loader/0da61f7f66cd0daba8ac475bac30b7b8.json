{"ast":null,"code":"/**\n * @licence\n * @author Sergey Melyukov 2016\n */\n\n/**\n * Waiting while all promises will be settled to onFulfilled or onRejected state\n * Returned promise will be resolved with array with info for every passed promise:\n * Array<{status:boolean, value:*}>\n *\n * onProgress-function will be called (if passed) for every settled promise\n *\n * @param {Array<Promise>} promises\n * @param {function({status:boolean, value:*})=} onProgress\n *\n * @return {Promise}\n */\nfunction allSettled(promises, onProgress) {\n  var mapped = promises.map(function (promise) {\n    return promise.then(function (value) {\n      return {\n        value: value,\n        status: true\n      };\n    }, function (e) {\n      return {\n        value: e,\n        status: false\n      };\n    }).then(function (value) {\n      if (typeof onProgress === 'function') {\n        onProgress(value);\n      }\n\n      return value;\n    });\n  });\n  return Promise.all(mapped);\n}\n\nmodule.exports = allSettled;","map":{"version":3,"sources":["C:/Users/kwbin/Documents/GitHub/portweb/node_modules/promise-ext-settled/src/index.js"],"names":["allSettled","promises","onProgress","mapped","map","promise","then","value","status","e","Promise","all","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,CAAoBC,QAApB,EAA8BC,UAA9B,EAA0C;AACtC,MAAIC,MAAM,GAAGF,QAAQ,CAACG,GAAT,CAAa,UAASC,OAAT,EAAkB;AACxC,WAAOA,OAAO,CAACC,IAAR,CAAa,UAASC,KAAT,EAAgB;AAChC,aAAO;AACHA,QAAAA,KAAK,EAAEA,KADJ;AAEHC,QAAAA,MAAM,EAAE;AAFL,OAAP;AAIH,KALM,EAKJ,UAASC,CAAT,EAAY;AACX,aAAO;AACHF,QAAAA,KAAK,EAAEE,CADJ;AAEHD,QAAAA,MAAM,EAAE;AAFL,OAAP;AAIH,KAVM,EAUJF,IAVI,CAUC,UAASC,KAAT,EAAgB;AACpB,UAAI,OAAOL,UAAP,KAAsB,UAA1B,EAAsC;AAClCA,QAAAA,UAAU,CAACK,KAAD,CAAV;AACH;;AAED,aAAOA,KAAP;AACH,KAhBM,CAAP;AAiBH,GAlBY,CAAb;AAoBA,SAAOG,OAAO,CAACC,GAAR,CAAYR,MAAZ,CAAP;AACH;;AAEDS,MAAM,CAACC,OAAP,GAAiBb,UAAjB","sourcesContent":["/**\n * @licence\n * @author Sergey Melyukov 2016\n */\n\n/**\n * Waiting while all promises will be settled to onFulfilled or onRejected state\n * Returned promise will be resolved with array with info for every passed promise:\n * Array<{status:boolean, value:*}>\n *\n * onProgress-function will be called (if passed) for every settled promise\n *\n * @param {Array<Promise>} promises\n * @param {function({status:boolean, value:*})=} onProgress\n *\n * @return {Promise}\n */\nfunction allSettled(promises, onProgress) {\n    var mapped = promises.map(function(promise) {\n        return promise.then(function(value) {\n            return {\n                value: value,\n                status: true\n            };\n        }, function(e) {\n            return {\n                value: e,\n                status: false\n            };\n        }).then(function(value) {\n            if (typeof onProgress === 'function') {\n                onProgress(value);\n            }\n\n            return value;\n        });\n    });\n\n    return Promise.all(mapped);\n}\n\nmodule.exports = allSettled;\n"]},"metadata":{},"sourceType":"script"}